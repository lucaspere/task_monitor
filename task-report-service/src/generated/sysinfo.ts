// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v3.19.1
// source: sysinfo.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "sysinfo";

export interface SystemInfoGetRequest {
  id: string;
}

export interface SystemInfoGetResponse {
  id: string;
  ip: string;
  startTime: string;
  data: Uint8Array;
}

export interface SystemInfoContext {
  ip: string;
  startTime: string;
}

export interface SystemInfoCreateRequest {
  context?: SystemInfoContext | undefined;
  data?: Uint8Array | undefined;
}

export interface SystemInfoCreateResponse {
  id: string;
}

function createBaseSystemInfoGetRequest(): SystemInfoGetRequest {
  return { id: "" };
}

export const SystemInfoGetRequest = {
  encode(message: SystemInfoGetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SystemInfoGetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemInfoGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemInfoGetRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SystemInfoGetRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<SystemInfoGetRequest>): SystemInfoGetRequest {
    return SystemInfoGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemInfoGetRequest>): SystemInfoGetRequest {
    const message = createBaseSystemInfoGetRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseSystemInfoGetResponse(): SystemInfoGetResponse {
  return { id: "", ip: "", startTime: "", data: new Uint8Array(0) };
}

export const SystemInfoGetResponse = {
  encode(message: SystemInfoGetResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    if (message.startTime !== "") {
      writer.uint32(26).string(message.startTime);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SystemInfoGetResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemInfoGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemInfoGetResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: SystemInfoGetResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<SystemInfoGetResponse>): SystemInfoGetResponse {
    return SystemInfoGetResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemInfoGetResponse>): SystemInfoGetResponse {
    const message = createBaseSystemInfoGetResponse();
    message.id = object.id ?? "";
    message.ip = object.ip ?? "";
    message.startTime = object.startTime ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSystemInfoContext(): SystemInfoContext {
  return { ip: "", startTime: "" };
}

export const SystemInfoContext = {
  encode(message: SystemInfoContext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ip !== "") {
      writer.uint32(10).string(message.ip);
    }
    if (message.startTime !== "") {
      writer.uint32(18).string(message.startTime);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SystemInfoContext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemInfoContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ip = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemInfoContext {
    return {
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "",
    };
  },

  toJSON(message: SystemInfoContext): unknown {
    const obj: any = {};
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.startTime !== "") {
      obj.startTime = message.startTime;
    }
    return obj;
  },

  create(base?: DeepPartial<SystemInfoContext>): SystemInfoContext {
    return SystemInfoContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemInfoContext>): SystemInfoContext {
    const message = createBaseSystemInfoContext();
    message.ip = object.ip ?? "";
    message.startTime = object.startTime ?? "";
    return message;
  },
};

function createBaseSystemInfoCreateRequest(): SystemInfoCreateRequest {
  return { context: undefined, data: undefined };
}

export const SystemInfoCreateRequest = {
  encode(message: SystemInfoCreateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.context !== undefined) {
      SystemInfoContext.encode(message.context, writer.uint32(10).fork()).ldelim();
    }
    if (message.data !== undefined) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SystemInfoCreateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemInfoCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = SystemInfoContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemInfoCreateRequest {
    return {
      context: isSet(object.context) ? SystemInfoContext.fromJSON(object.context) : undefined,
      data: isSet(object.data) ? bytesFromBase64(object.data) : undefined,
    };
  },

  toJSON(message: SystemInfoCreateRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = SystemInfoContext.toJSON(message.context);
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<SystemInfoCreateRequest>): SystemInfoCreateRequest {
    return SystemInfoCreateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemInfoCreateRequest>): SystemInfoCreateRequest {
    const message = createBaseSystemInfoCreateRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? SystemInfoContext.fromPartial(object.context)
      : undefined;
    message.data = object.data ?? undefined;
    return message;
  },
};

function createBaseSystemInfoCreateResponse(): SystemInfoCreateResponse {
  return { id: "" };
}

export const SystemInfoCreateResponse = {
  encode(message: SystemInfoCreateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SystemInfoCreateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemInfoCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemInfoCreateResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SystemInfoCreateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<SystemInfoCreateResponse>): SystemInfoCreateResponse {
    return SystemInfoCreateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemInfoCreateResponse>): SystemInfoCreateResponse {
    const message = createBaseSystemInfoCreateResponse();
    message.id = object.id ?? "";
    return message;
  },
};

export type SystemMonitorDefinition = typeof SystemMonitorDefinition;
export const SystemMonitorDefinition = {
  name: "SystemMonitor",
  fullName: "sysinfo.SystemMonitor",
  methods: {
    getSystemInfo: {
      name: "GetSystemInfo",
      requestType: SystemInfoGetRequest,
      requestStream: false,
      responseType: SystemInfoGetResponse,
      responseStream: false,
      options: {},
    },
    sendSystemInfo: {
      name: "SendSystemInfo",
      requestType: SystemInfoCreateRequest,
      requestStream: true,
      responseType: SystemInfoCreateResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SystemMonitorServiceImplementation<CallContextExt = {}> {
  getSystemInfo(
    request: SystemInfoGetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SystemInfoGetResponse>>;
  sendSystemInfo(
    request: AsyncIterable<SystemInfoCreateRequest>,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SystemInfoCreateResponse>>;
}

export interface SystemMonitorClient<CallOptionsExt = {}> {
  getSystemInfo(
    request: DeepPartial<SystemInfoGetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SystemInfoGetResponse>;
  sendSystemInfo(
    request: AsyncIterable<DeepPartial<SystemInfoCreateRequest>>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SystemInfoCreateResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
